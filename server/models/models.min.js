const {Schema, model}=require("mongoose"),bcrypt=require("bcrypt"),bookSchema=new Schema({authors:[{type:String}],description:{type:String,required:!0},bookId:{type:String,required:!0},image:{type:String},link:{type:String},title:{type:String,required:!0},rating:{type:Number,required:!0}}),movieSchema=new Schema({movieId:{type:String,required:!0},image:{type:String},movieLength:{type:String},title:{type:String,required:!0}}),watchlistSchema=new Schema({movieId:{type:String,required:!0},image:{type:String},movieLength:{type:String},title:{type:String,required:!0},createdAt:{type:Date,default:Date.now}}),userSchema=new Schema({username:{type:String,required:!0,unique:!0,maxlength:20,minlenth:8},email:{type:String,required:!0,unique:!0,match:[/.+@.+\..+/,"Must use a valid email address"]},password:{type:String,required:!0},memberSince:{type:Date},savedBooks:[bookSchema],savedMovies:[movieSchema],savedWatchlist:[watchlistSchema]},{toJSON:{virtuals:!0}});userSchema.pre("save",async function(next){if(this.isNew||this.isModified("password")){const saltRounds=10;this.password=await bcrypt.hash(this.password,saltRounds)}if(this.isNew)this.memberSince=new Date;next()}),userSchema.methods.isCorrectPassword=async function(password){return bcrypt.compare(password,this.password)},userSchema.virtual("bookCount").get(function(){return this.savedBooks.length});const User=model("User",userSchema);module.exports={User,bookSchema,movieSchema,watchlistSchema};
